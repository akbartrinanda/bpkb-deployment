!function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={i:moduleId,l:!1,exports:{}};return modules[moduleId].call(module.exports,module,module.exports,__webpack_require__),module.l=!0,module.exports}__webpack_require__.m=modules,__webpack_require__.c=installedModules,__webpack_require__.d=function(exports,name,getter){__webpack_require__.o(exports,name)||Object.defineProperty(exports,name,{enumerable:!0,get:getter})},__webpack_require__.r=function(exports){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(exports,"__esModule",{value:!0})},__webpack_require__.t=function(value,mode){if(1&mode&&(value=__webpack_require__(value)),8&mode)return value;if(4&mode&&"object"==typeof value&&value&&value.__esModule)return value;var ns=Object.create(null);if(__webpack_require__.r(ns),Object.defineProperty(ns,"default",{enumerable:!0,value:value}),2&mode&&"string"!=typeof value)for(var key in value)__webpack_require__.d(ns,key,(function(key){return value[key]}).bind(null,key));return ns},__webpack_require__.n=function(module){var getter=module&&module.__esModule?function(){return module.default}:function(){return module};return __webpack_require__.d(getter,"a",getter),getter},__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)},__webpack_require__.p="",__webpack_require__(__webpack_require__.s="A3SC")}({A3SC:function(module,__webpack_exports__,__webpack_require__){"use strict";function isFunction(x){return"function"==typeof x}__webpack_require__.r(__webpack_exports__);let _enable_super_gross_mode_that_will_cause_bad_things=!1;const config={Promise:void 0,set useDeprecatedSynchronousErrorHandling(value){if(value){const error=new Error;console.warn("DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n"+error.stack)}else _enable_super_gross_mode_that_will_cause_bad_things&&console.log("RxJS: Back to a better error behavior. Thank you. <3");_enable_super_gross_mode_that_will_cause_bad_things=value},get useDeprecatedSynchronousErrorHandling(){return _enable_super_gross_mode_that_will_cause_bad_things}};function hostReportError(err){setTimeout(()=>{throw err})}const empty={closed:!0,next(value){},error(err){if(config.useDeprecatedSynchronousErrorHandling)throw err;hostReportError(err)},complete(){}},isArray=Array.isArray||(x=>x&&"number"==typeof x.length);function isObject(x){return null!==x&&"object"==typeof x}function UnsubscriptionErrorImpl(errors){return Error.call(this),this.message=errors?`${errors.length} errors occurred during unsubscription:\n${errors.map((err,i)=>`${i+1}) ${err.toString()}`).join("\n  ")}`:"",this.name="UnsubscriptionError",this.errors=errors,this}UnsubscriptionErrorImpl.prototype=Object.create(Error.prototype);const UnsubscriptionError=UnsubscriptionErrorImpl;let Subscription_Subscription=(()=>{class Subscription{constructor(unsubscribe){this.closed=!1,this._parent=null,this._parents=null,this._subscriptions=null,unsubscribe&&(this._unsubscribe=unsubscribe)}unsubscribe(){let errors,hasErrors=!1;if(this.closed)return;let{_parent:_parent,_parents:_parents,_unsubscribe:_unsubscribe,_subscriptions:_subscriptions}=this;this.closed=!0,this._parent=null,this._parents=null,this._subscriptions=null;let index=-1,len=_parents?_parents.length:0;for(;_parent;)_parent.remove(this),_parent=++index<len&&_parents[index]||null;if(isFunction(_unsubscribe))try{_unsubscribe.call(this)}catch(e){hasErrors=!0,errors=e instanceof UnsubscriptionError?flattenUnsubscriptionErrors(e.errors):[e]}if(isArray(_subscriptions))for(index=-1,len=_subscriptions.length;++index<len;){const sub=_subscriptions[index];if(isObject(sub))try{sub.unsubscribe()}catch(e){hasErrors=!0,errors=errors||[],e instanceof UnsubscriptionError?errors=errors.concat(flattenUnsubscriptionErrors(e.errors)):errors.push(e)}}if(hasErrors)throw new UnsubscriptionError(errors)}add(teardown){let subscription=teardown;switch(typeof teardown){case"function":subscription=new Subscription(teardown);case"object":if(subscription===this||subscription.closed||"function"!=typeof subscription.unsubscribe)return subscription;if(this.closed)return subscription.unsubscribe(),subscription;if(!(subscription instanceof Subscription)){const tmp=subscription;subscription=new Subscription,subscription._subscriptions=[tmp]}break;default:if(!teardown)return Subscription.EMPTY;throw new Error("unrecognized teardown "+teardown+" added to Subscription.")}if(subscription._addParent(this)){const subscriptions=this._subscriptions;subscriptions?subscriptions.push(subscription):this._subscriptions=[subscription]}return subscription}remove(subscription){const subscriptions=this._subscriptions;if(subscriptions){const subscriptionIndex=subscriptions.indexOf(subscription);-1!==subscriptionIndex&&subscriptions.splice(subscriptionIndex,1)}}_addParent(parent){let{_parent:_parent,_parents:_parents}=this;return _parent!==parent&&(_parent?_parents?-1===_parents.indexOf(parent)&&(_parents.push(parent),!0):(this._parents=[parent],!0):(this._parent=parent,!0))}}return Subscription.EMPTY=function(empty){return empty.closed=!0,empty}(new Subscription),Subscription})();function flattenUnsubscriptionErrors(errors){return errors.reduce((errs,err)=>errs.concat(err instanceof UnsubscriptionError?err.errors:err),[])}const rxSubscriber="function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random();class Subscriber_Subscriber extends Subscription_Subscription{constructor(destinationOrNext,error,complete){switch(super(),this.syncErrorValue=null,this.syncErrorThrown=!1,this.syncErrorThrowable=!1,this.isStopped=!1,arguments.length){case 0:this.destination=empty;break;case 1:if(!destinationOrNext){this.destination=empty;break}if("object"==typeof destinationOrNext){destinationOrNext instanceof Subscriber_Subscriber?(this.syncErrorThrowable=destinationOrNext.syncErrorThrowable,this.destination=destinationOrNext,destinationOrNext.add(this)):(this.syncErrorThrowable=!0,this.destination=new Subscriber_SafeSubscriber(this,destinationOrNext));break}default:this.syncErrorThrowable=!0,this.destination=new Subscriber_SafeSubscriber(this,destinationOrNext,error,complete)}}[rxSubscriber](){return this}static create(next,error,complete){const subscriber=new Subscriber_Subscriber(next,error,complete);return subscriber.syncErrorThrowable=!1,subscriber}next(value){this.isStopped||this._next(value)}error(err){this.isStopped||(this.isStopped=!0,this._error(err))}complete(){this.isStopped||(this.isStopped=!0,this._complete())}unsubscribe(){this.closed||(this.isStopped=!0,super.unsubscribe())}_next(value){this.destination.next(value)}_error(err){this.destination.error(err),this.unsubscribe()}_complete(){this.destination.complete(),this.unsubscribe()}_unsubscribeAndRecycle(){const{_parent:_parent,_parents:_parents}=this;return this._parent=null,this._parents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parent=_parent,this._parents=_parents,this}}class Subscriber_SafeSubscriber extends Subscriber_Subscriber{constructor(_parentSubscriber,observerOrNext,error,complete){let next;super(),this._parentSubscriber=_parentSubscriber;let context=this;isFunction(observerOrNext)?next=observerOrNext:observerOrNext&&(next=observerOrNext.next,error=observerOrNext.error,complete=observerOrNext.complete,observerOrNext!==empty&&(context=Object.create(observerOrNext),isFunction(context.unsubscribe)&&this.add(context.unsubscribe.bind(context)),context.unsubscribe=this.unsubscribe.bind(this))),this._context=context,this._next=next,this._error=error,this._complete=complete}next(value){if(!this.isStopped&&this._next){const{_parentSubscriber:_parentSubscriber}=this;config.useDeprecatedSynchronousErrorHandling&&_parentSubscriber.syncErrorThrowable?this.__tryOrSetError(_parentSubscriber,this._next,value)&&this.unsubscribe():this.__tryOrUnsub(this._next,value)}}error(err){if(!this.isStopped){const{_parentSubscriber:_parentSubscriber}=this,{useDeprecatedSynchronousErrorHandling:useDeprecatedSynchronousErrorHandling}=config;if(this._error)useDeprecatedSynchronousErrorHandling&&_parentSubscriber.syncErrorThrowable?(this.__tryOrSetError(_parentSubscriber,this._error,err),this.unsubscribe()):(this.__tryOrUnsub(this._error,err),this.unsubscribe());else if(_parentSubscriber.syncErrorThrowable)useDeprecatedSynchronousErrorHandling?(_parentSubscriber.syncErrorValue=err,_parentSubscriber.syncErrorThrown=!0):hostReportError(err),this.unsubscribe();else{if(this.unsubscribe(),useDeprecatedSynchronousErrorHandling)throw err;hostReportError(err)}}}complete(){if(!this.isStopped){const{_parentSubscriber:_parentSubscriber}=this;if(this._complete){const wrappedComplete=()=>this._complete.call(this._context);config.useDeprecatedSynchronousErrorHandling&&_parentSubscriber.syncErrorThrowable?(this.__tryOrSetError(_parentSubscriber,wrappedComplete),this.unsubscribe()):(this.__tryOrUnsub(wrappedComplete),this.unsubscribe())}else this.unsubscribe()}}__tryOrUnsub(fn,value){try{fn.call(this._context,value)}catch(err){if(this.unsubscribe(),config.useDeprecatedSynchronousErrorHandling)throw err;hostReportError(err)}}__tryOrSetError(parent,fn,value){if(!config.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{fn.call(this._context,value)}catch(err){return config.useDeprecatedSynchronousErrorHandling?(parent.syncErrorValue=err,parent.syncErrorThrown=!0,!0):(hostReportError(err),!0)}return!1}_unsubscribe(){const{_parentSubscriber:_parentSubscriber}=this;this._context=null,this._parentSubscriber=null,_parentSubscriber.unsubscribe()}}const observable_observable="function"==typeof Symbol&&Symbol.observable||"@@observable";function noop(){}let Observable_Observable=(()=>{class Observable{constructor(subscribe){this._isScalar=!1,subscribe&&(this._subscribe=subscribe)}lift(operator){const observable=new Observable;return observable.source=this,observable.operator=operator,observable}subscribe(observerOrNext,error,complete){const{operator:operator}=this,sink=function(nextOrObserver,error,complete){if(nextOrObserver){if(nextOrObserver instanceof Subscriber_Subscriber)return nextOrObserver;if(nextOrObserver[rxSubscriber])return nextOrObserver[rxSubscriber]()}return nextOrObserver||error||complete?new Subscriber_Subscriber(nextOrObserver,error,complete):new Subscriber_Subscriber(empty)}(observerOrNext,error,complete);if(sink.add(operator?operator.call(sink,this.source):this.source||config.useDeprecatedSynchronousErrorHandling&&!sink.syncErrorThrowable?this._subscribe(sink):this._trySubscribe(sink)),config.useDeprecatedSynchronousErrorHandling&&sink.syncErrorThrowable&&(sink.syncErrorThrowable=!1,sink.syncErrorThrown))throw sink.syncErrorValue;return sink}_trySubscribe(sink){try{return this._subscribe(sink)}catch(err){config.useDeprecatedSynchronousErrorHandling&&(sink.syncErrorThrown=!0,sink.syncErrorValue=err),function(observer){for(;observer;){const{closed:closed,destination:destination,isStopped:isStopped}=observer;if(closed||isStopped)return!1;observer=destination&&destination instanceof Subscriber_Subscriber?destination:null}return!0}(sink)?sink.error(err):console.warn(err)}}forEach(next,promiseCtor){return new(promiseCtor=getPromiseCtor(promiseCtor))((resolve,reject)=>{let subscription;subscription=this.subscribe(value=>{try{next(value)}catch(err){reject(err),subscription&&subscription.unsubscribe()}},reject,resolve)})}_subscribe(subscriber){const{source:source}=this;return source&&source.subscribe(subscriber)}[observable_observable](){return this}pipe(...operations){return 0===operations.length?this:((fns=operations)?1===fns.length?fns[0]:function(input){return fns.reduce((prev,fn)=>fn(prev),input)}:noop)(this);var fns}toPromise(promiseCtor){return new(promiseCtor=getPromiseCtor(promiseCtor))((resolve,reject)=>{let value;this.subscribe(x=>value=x,err=>reject(err),()=>resolve(value))})}}return Observable.create=subscribe=>new Observable(subscribe),Observable})();function getPromiseCtor(promiseCtor){if(promiseCtor||(promiseCtor=config.Promise||Promise),!promiseCtor)throw new Error("no Promise impl found");return promiseCtor}const EMPTY=new Observable_Observable(subscriber=>subscriber.complete());function empty_empty(scheduler){return scheduler?function(scheduler){return new Observable_Observable(subscriber=>scheduler.schedule(()=>subscriber.complete()))}(scheduler):EMPTY}const subscribeToArray=array=>subscriber=>{for(let i=0,len=array.length;i<len&&!subscriber.closed;i++)subscriber.next(array[i]);subscriber.closed||subscriber.complete()};function fromArray(input,scheduler){return new Observable_Observable(scheduler?subscriber=>{const sub=new Subscription_Subscription;let i=0;return sub.add(scheduler.schedule((function(){i!==input.length?(subscriber.next(input[i++]),subscriber.closed||sub.add(this.schedule())):subscriber.complete()}))),sub}:subscribeToArray(input))}let Notification_Notification=(()=>{class Notification{constructor(kind,value,error){this.kind=kind,this.value=value,this.error=error,this.hasValue="N"===kind}observe(observer){switch(this.kind){case"N":return observer.next&&observer.next(this.value);case"E":return observer.error&&observer.error(this.error);case"C":return observer.complete&&observer.complete()}}do(next,error,complete){switch(this.kind){case"N":return next&&next(this.value);case"E":return error&&error(this.error);case"C":return complete&&complete()}}accept(nextOrObserver,error,complete){return nextOrObserver&&"function"==typeof nextOrObserver.next?this.observe(nextOrObserver):this.do(nextOrObserver,error,complete)}toObservable(){switch(this.kind){case"N":return function(...args){let scheduler=args[args.length-1];var value;switch((value=scheduler)&&"function"==typeof value.schedule?args.pop():scheduler=void 0,args.length){case 0:return empty_empty(scheduler);case 1:return scheduler?fromArray(args,scheduler):function(value){const result=new Observable_Observable(subscriber=>{subscriber.next(value),subscriber.complete()});return result._isScalar=!0,result.value=value,result}(args[0]);default:return fromArray(args,scheduler)}}(this.value);case"E":return error=this.error,new Observable_Observable(subscriber=>subscriber.error(error));case"C":return empty_empty()}var error;throw new Error("unexpected notification kind value")}static createNext(value){return void 0!==value?new Notification("N",value):Notification.undefinedValueNotification}static createError(err){return new Notification("E",void 0,err)}static createComplete(){return Notification.completeNotification}}return Notification.completeNotification=new Notification("C"),Notification.undefinedValueNotification=new Notification("N",void 0),Notification})();function map(project,thisArg){return function(source){if("function"!=typeof project)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return source.lift(new MapOperator(project,thisArg))}}class MapOperator{constructor(project,thisArg){this.project=project,this.thisArg=thisArg}call(subscriber,source){return source.subscribe(new map_MapSubscriber(subscriber,this.project,this.thisArg))}}class map_MapSubscriber extends Subscriber_Subscriber{constructor(destination,project,thisArg){super(destination),this.project=project,this.count=0,this.thisArg=thisArg||this}_next(value){let result;try{result=this.project.call(this.thisArg,value,this.count++)}catch(err){return void this.destination.error(err)}this.destination.next(result)}}Error;class OuterSubscriber_OuterSubscriber extends Subscriber_Subscriber{notifyNext(outerValue,innerValue,outerIndex,innerIndex,innerSub){this.destination.next(innerValue)}notifyError(error,innerSub){this.destination.error(error)}notifyComplete(innerSub){this.destination.complete()}}class InnerSubscriber_InnerSubscriber extends Subscriber_Subscriber{constructor(parent,outerValue,outerIndex){super(),this.parent=parent,this.outerValue=outerValue,this.outerIndex=outerIndex,this.index=0}_next(value){this.parent.notifyNext(this.outerValue,value,this.outerIndex,this.index++,this)}_error(error){this.parent.notifyError(error,this),this.unsubscribe()}_complete(){this.parent.notifyComplete(this),this.unsubscribe()}}const subscribeToPromise=promise=>subscriber=>(promise.then(value=>{subscriber.closed||(subscriber.next(value),subscriber.complete())},err=>subscriber.error(err)).then(null,hostReportError),subscriber);function getSymbolIterator(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}const iterator_iterator=getSymbolIterator(),subscribeToIterable=iterable=>subscriber=>{const iterator=iterable[iterator_iterator]();for(;;){const item=iterator.next();if(item.done){subscriber.complete();break}if(subscriber.next(item.value),subscriber.closed)break}return"function"==typeof iterator.return&&subscriber.add(()=>{iterator.return&&iterator.return()}),subscriber},subscribeToObservable=obj=>subscriber=>{const obs=obj[observable_observable]();if("function"!=typeof obs.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return obs.subscribe(subscriber)},isArrayLike=x=>x&&"number"==typeof x.length&&"function"!=typeof x;function isPromise(value){return!!value&&"function"!=typeof value.subscribe&&"function"==typeof value.then}const subscribeTo=result=>{if(result instanceof Observable_Observable)return subscriber=>result._isScalar?(subscriber.next(result.value),void subscriber.complete()):result.subscribe(subscriber);if(result&&"function"==typeof result[observable_observable])return subscribeToObservable(result);if(isArrayLike(result))return subscribeToArray(result);if(isPromise(result))return subscribeToPromise(result);if(result&&"function"==typeof result[iterator_iterator])return subscribeToIterable(result);{const value=isObject(result)?"an invalid object":`'${result}'`;throw new TypeError(`You provided ${value} where a stream was expected.`+" You can provide an Observable, Promise, Array, or Iterable.")}};class FilterOperator{constructor(predicate,thisArg){this.predicate=predicate,this.thisArg=thisArg}call(subscriber,source){return source.subscribe(new filter_FilterSubscriber(subscriber,this.predicate,this.thisArg))}}class filter_FilterSubscriber extends Subscriber_Subscriber{constructor(destination,predicate,thisArg){super(destination),this.predicate=predicate,this.thisArg=thisArg,this.count=0}_next(value){let result;try{result=this.predicate.call(this.thisArg,value,this.count++)}catch(err){return void this.destination.error(err)}result&&this.destination.next(value)}}class DeMaterializeOperator{call(subscriber,source){return source.subscribe(new dematerialize_DeMaterializeSubscriber(subscriber))}}class dematerialize_DeMaterializeSubscriber extends Subscriber_Subscriber{constructor(destination){super(destination)}_next(value){value.observe(this.destination)}}class MergeMapOperator{constructor(project,concurrent=Number.POSITIVE_INFINITY){this.project=project,this.concurrent=concurrent}call(observer,source){return source.subscribe(new mergeMap_MergeMapSubscriber(observer,this.project,this.concurrent))}}class mergeMap_MergeMapSubscriber extends OuterSubscriber_OuterSubscriber{constructor(destination,project,concurrent=Number.POSITIVE_INFINITY){super(destination),this.project=project,this.concurrent=concurrent,this.hasCompleted=!1,this.buffer=[],this.active=0,this.index=0}_next(value){this.active<this.concurrent?this._tryNext(value):this.buffer.push(value)}_tryNext(value){let result;const index=this.index++;try{result=this.project(value,index)}catch(err){return void this.destination.error(err)}this.active++,this._innerSub(result,value,index)}_innerSub(ish,value,index){const innerSubscriber=new InnerSubscriber_InnerSubscriber(this,void 0,void 0);this.destination.add(innerSubscriber),function(outerSubscriber,result,outerValue,outerIndex,destination=new InnerSubscriber_InnerSubscriber(outerSubscriber,outerValue,outerIndex)){destination.closed||subscribeTo(result)(destination)}(this,ish,value,index,innerSubscriber)}_complete(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()}notifyNext(outerValue,innerValue,outerIndex,innerIndex,innerSub){this.destination.next(innerValue)}notifyComplete(innerSub){const buffer=this.buffer;this.remove(innerSub),this.active--,buffer.length>0?this._next(buffer.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()}}function materialize(){return function(source){return source.lift(new MaterializeOperator)}}class MaterializeOperator{call(subscriber,source){return source.subscribe(new materialize_MaterializeSubscriber(subscriber))}}class materialize_MaterializeSubscriber extends Subscriber_Subscriber{constructor(destination){super(destination)}_next(value){this.destination.next(Notification_Notification.createNext(value))}_error(err){const destination=this.destination;destination.next(Notification_Notification.createError(err)),destination.complete()}_complete(){const destination=this.destination;destination.next(Notification_Notification.createComplete()),destination.complete()}}function getWorkerResult(worker,incomingMessages$){const input$=incomingMessages$.pipe(map(e=>e.data),map(n=>new Notification_Notification(n.kind,n.value,n.error)),(predicate=n=>"C"!==n.kind,function(source){return source.lift(new FilterOperator(predicate,void 0))}),(function(source){return source.lift(new DeMaterializeOperator)}));var predicate;return function(worker){return!!worker.workUnit}(worker)?input$.pipe(function mergeMap(project,resultSelector,concurrent=Number.POSITIVE_INFINITY){return"function"==typeof resultSelector?source=>source.pipe(mergeMap((a,i)=>{return(input=project(a,i),input instanceof Observable_Observable?input:new Observable_Observable(subscribeTo(input))).pipe(map((b,ii)=>resultSelector(a,b,i,ii)));var input},concurrent)):("number"==typeof resultSelector&&(concurrent=resultSelector),source=>source.lift(new MergeMapOperator(project,concurrent)))}(input=>worker.workUnit(input).pipe(materialize()),void 0,1)):worker.work(input$).pipe(materialize())}__webpack_require__.d(__webpack_exports__,"FileImageSingleWorker",(function(){return file_image_single_worker_FileImageSingleWorker}));let file_image_single_worker_FileImageSingleWorker=(()=>{let FileImageSingleWorker=class{workUnit(input){return this.readFileAsArrayBuffer(input)}readFileAsArrayBuffer(blob){return new Observable_Observable(observer=>{if(!(blob instanceof Blob))return void observer.error(new Error("`blob` must be an instance of File or Blob."));const reader=new FileReader;return reader.onerror=err=>observer.error(err),reader.onload=()=>observer.next(reader.result),reader.onloadend=()=>observer.complete(),reader.readAsArrayBuffer(blob),()=>reader.abort()})}};return FileImageSingleWorker=function(decorators,target,key,desc){var d,c=arguments.length,r=c<3?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r}([workerConstructor=>{!function(workerConstructor){const worker=new workerConstructor,incomingMessages$=function fromEvent(target,eventName,options,resultSelector){return isFunction(options)&&(resultSelector=options,options=void 0),resultSelector?fromEvent(target,eventName,options).pipe(map(args=>isArray(args)?resultSelector(...args):resultSelector(args))):new Observable_Observable(subscriber=>{!function setupSubscription(sourceObj,eventName,handler,subscriber,options){let unsubscribe;if(function(sourceObj){return sourceObj&&"function"==typeof sourceObj.addEventListener&&"function"==typeof sourceObj.removeEventListener}(sourceObj)){const source=sourceObj;sourceObj.addEventListener(eventName,handler,options),unsubscribe=()=>source.removeEventListener(eventName,handler,options)}else if(function(sourceObj){return sourceObj&&"function"==typeof sourceObj.on&&"function"==typeof sourceObj.off}(sourceObj)){const source=sourceObj;sourceObj.on(eventName,handler),unsubscribe=()=>source.off(eventName,handler)}else if(function(sourceObj){return sourceObj&&"function"==typeof sourceObj.addListener&&"function"==typeof sourceObj.removeListener}(sourceObj)){const source=sourceObj;sourceObj.addListener(eventName,handler),unsubscribe=()=>source.removeListener(eventName,handler)}else{if(!sourceObj||!sourceObj.length)throw new TypeError("Invalid event target");for(let i=0,len=sourceObj.length;i<len;i++)setupSubscription(sourceObj[i],eventName,handler,subscriber,options)}subscriber.add(unsubscribe)}(target,eventName,(function(e){subscriber.next(arguments.length>1?Array.prototype.slice.call(arguments):e)}),subscriber,options)})}(self,"message"),transferableWorker=function(worker){return!!worker.selectTransferables}(worker);getWorkerResult(worker,incomingMessages$).subscribe(notification=>{const workerPostMessage=postMessage;transferableWorker&&notification.hasValue?workerPostMessage(notification,worker.selectTransferables(notification.value)):workerPostMessage(notification)})}(workerConstructor)}],FileImageSingleWorker),FileImageSingleWorker})()}});